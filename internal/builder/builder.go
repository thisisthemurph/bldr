package builder

import (
	"bytes"
	"fmt"
	"github.com/thisisthemurph/bldr/internal/parser"
	"go/format"
	"time"
)

func Generate(structDetail *parser.StructDetail, packageName string) (string, error) {
	var buf bytes.Buffer

	isSamePackage := packageName == structDetail.PackageName
	builderName := structDetail.Name + "Builder"

	structName := structDetail.Name
	if !isSamePackage {
		structName = fmt.Sprintf("%s.%s", structDetail.PackageName, structDetail.Name)
	}

	_, _ = fmt.Fprintf(&buf, "// Code generated by bldr. DO NOT EDIT.\n")
	_, _ = fmt.Fprintf(&buf, "// Generated %s.\n\n", time.Now().Format(time.RFC850))
	_, _ = fmt.Fprintf(&buf, "package %s\n\n", packageName)
	if !isSamePackage {
		_, _ = fmt.Fprintf(&buf, "import %q\n\n", structDetail.Import)
	}
	_, _ = fmt.Fprintf(&buf, "type %s struct {\n\tmodel %s\n}\n\n", builderName, structName)
	_, _ = fmt.Fprintf(&buf, "func New%s() *%s {\n\treturn &%s{}\n}\n\n", builderName, builderName, builderName)
	for _, field := range structDetail.Fields {
		_, _ = fmt.Fprintf(&buf, "func (b *%s) With%s(v %s) {\n\tb.model.%s = v\n}\n\n", builderName, field.Name, field.Type, field.Name)
	}
	_, _ = fmt.Fprintf(&buf, "func (b *%s) Build() %s {\n\treturn b.model\n}\n\n", builderName, structName)

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return buf.String(), err
	}

	return string(formatted), nil
}
